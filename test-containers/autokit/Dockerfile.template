#if building via docker on local workstation, build with env variable BALENA_ARCH=amd64
#if building via balena builder/engine then no need, this will automatically evaluate to the target device arch
ARG BALENA_ARCH=%%BALENA_ARCH%%

FROM balenalib/${BALENA_ARCH}-alpine-node:16-run

WORKDIR /usr/app

RUN apk add --no-cache openssh libusb-dev dbus-dev python3 py3-pip py3-setuptools make build-base cmake git linux-headers eudev-dev libftdi1-dev popt-dev hidapi-dev util-linux

  
# hadolint ignore=DL3018
RUN apk add --no-cache uhubctl --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community || true

COPY package*.json ./
RUN npm ci

COPY tsconfig.json ./
COPY index.ts ./

# build typescript
RUN npm run build

ENV UDEV 1
ENV DBUS_SYSTEM_BUS_ADDRESS unix:path=/host/run/dbus/system_bus_socket

RUN pip3 install usbsdmux

ARG BALENA_CLI_REF="v16.1.0"
ARG BALENA_CLI_VERSION="16.1.0"

# Install balena-cli via standlone zip, only compatible with glibc (not alpine/musl)
RUN if [ "$(uname -m)" = "arm64" ] || [ "$(uname -m)" = "aarch64" ] ; \
	then \
		wget -q -O balena-cli.zip "https://github.com/balena-io/balena-cli/releases/download/${BALENA_CLI_REF}/balena-cli-v${BALENA_CLI_VERSION}-linux-arm64-standalone.zip" && \
		unzip balena-cli.zip && rm balena-cli.zip ; \
	elif [ "$(uname -m)" = "armv7l" ] || [ "$(uname -m)" = "armv7hf" ] ; \
	then \
		npm i balena-cli@latest ; \
		mv /usr/app/node_modules/balena-cli/ /usr/app ; \
		rm -rf /usr/app/node_modules/ ; \
	else \
		wget -q -O balena-cli.zip "https://github.com/balena-io/balena-cli/releases/download/${BALENA_CLI_REF}/balena-cli-v${BALENA_CLI_VERSION}-linux-x64-standalone.zip" && \
		unzip balena-cli.zip && rm balena-cli.zip ; \
	fi

# Add balena-cli to PATH
ENV PATH /usr/app/balena-cli:$PATH


RUN git clone https://github.com/rcooke-warwick/sut-tests.git && cd sut-tests && npm install

COPY entry.sh entry.sh

RUN ls
RUN chmod +x entry.sh

CMD ["/usr/app/entry.sh"]